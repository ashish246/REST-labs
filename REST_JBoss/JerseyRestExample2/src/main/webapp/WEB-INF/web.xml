<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>

  <display-name>Archetype Created Web Application</display-name>
  
  <!-- All three are necessary, and then JBoss's scanner skips the WAR file, 
		allowing Jersey to do its stuff. -->
	<context-param>
		<param-name>resteasy.scan</param-name>
		<param-value>false</param-value>
	</context-param>
	<context-param>
		<param-name>resteasy.scan.resources</param-name>
		<param-value>false</param-value>
	</context-param>
	<context-param>
		<param-name>resteasy.scan.providers</param-name>
		<param-value>false</param-value>
	</context-param>
  
  <servlet>
		<servlet-name>jersey-serlvet</servlet-name>
		<servlet-class>
			com.sun.jersey.spi.container.servlet.ServletContainer
		</servlet-class>
		<!-- To use Application you must set a servlet init-param, javax.ws.rs.Application 
			with a fully qualified class that implements Application. You can optionally 
			add javax.ws.rs.core.Application subclasses to your application and then 
			add the URL patterns required using either the javax.ws.rs.ApplicationPath 
			annotation or a web.xml servlet definition. -->
		<init-param>
			<param-name>javax.ws.rs.Application</param-name>
			<param-value>com.resteasy.demo.MessageApplication</param-value>
			<!-- If you have this set, you should probably turn off automatic scanning 
				as this will probably result in duplicate classes being registered. -->
		</init-param>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>jersey-serlvet</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>
	
</web-app>
