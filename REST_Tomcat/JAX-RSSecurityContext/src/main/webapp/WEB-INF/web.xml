<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>

	<display-name>Archetype Created Web Application</display-name>


	<servlet>
		<servlet-name>jersey-serlvet</servlet-name>
		<servlet-class>
			org.glassfish.jersey.servlet.ServletContainer
		</servlet-class>
		<!-- To use Application you must set a servlet init-param, javax.ws.rs.Application 
			with a fully qualified class that implements Application. You can optionally 
			add javax.ws.rs.core.Application subclasses to your application and then 
			add the URL patterns required using either the javax.ws.rs.ApplicationPath 
			annotation or a web.xml servlet definition. -->
		<init-param>
			<param-name>javax.ws.rs.Application</param-name>
			<param-value>com.rest.context.service.MessageApplication</param-value>
			<!-- If you have this set, you should probably turn off automatic scanning 
				as this will probably result in duplicate classes being registered. -->
		</init-param>
	</servlet>

	<servlet-mapping>
		<servlet-name>jersey-serlvet</servlet-name>
		<url-pattern>/rest/*</url-pattern>
	</servlet-mapping>

	<session-config>
		<session-timeout>120</session-timeout>
	</session-config>

	<security-constraint>
		<web-resource-collection>
			<web-resource-name>Operator Roles Security</web-resource-name>
			<url-pattern>/rest/*</url-pattern>
		</web-resource-collection>

		<auth-constraint>
			<role-name>operator</role-name>
		</auth-constraint>
		<user-data-constraint>
			<transport-guarantee>NONE</transport-guarantee>
		</user-data-constraint>
	</security-constraint>

	<login-config>
		<auth-method>BASIC</auth-method>
	</login-config>

	<security-role>
		<description>Normal operator user</description>
		<role-name>operator</role-name>
	</security-role>

	<!-- In production, it’s recommended to set the transport guarantee to “CONFIDENTIAL“, 
		so that any access to resources via normal http request, such as http://localhost:8080/ws/user, 
		Tomcat will redirect the request to https request https://localhost:8443/ws/user. 
		Of course, the redirect https can be configure in The Tomcat’s conf/server.xml. 
		<user-data-constraint> <transport-guarantee>CONFIDENTIAL</transport-guarantee> 
		</user-data-constraint> -->

</web-app>
